import { useState, useEffect } from "react";
import { Worker, WorkerStatus, ServiceType } from "@/types";
import { Button } from "@/components/ui/button";
import { LoadingButton } from "@/components/ui/loading-button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Check, Pencil, X, Trash, Save, Edit } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { WorkerService } from "@/services/mockDatabase";
import { getWorkerApplications, mapWorkerApplicationToWorker, updateWorkerApplicationStatus, deleteWorkerApplication } from "@/lib/supabase";
import { WorkerAPI } from "@/services/api-service";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface WorkerProfileProps {
  workerId: string | null;
  open: boolean;
  onClose: () => void;
  onStatusChange?: () => void;
}

export function WorkerProfile({ workerId, open, onClose, onStatusChange }: WorkerProfileProps) {
  const [worker, setWorker] = useState<Worker | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isVerifying, setIsVerifying] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  
  // Editable fields state
  const [editableData, setEditableData] = useState({
    phone: '',
    email: '',
    address: '',
    service: '' as ServiceType,
    availability: '',
    status: '' as WorkerStatus,
    religion: ''
  });
  
  const { toast } = useToast();

  useEffect(() => {
    const loadWorkerData = async () => {
      if (!workerId || !open) return;
      
      setIsLoading(true);
      console.log(`Loading worker data for ID: ${workerId}`);
      
      try {
        // First make sure worker mappings are synced
        await WorkerAPI.syncWorkerMappings();
        
        // Try to get all workers via the API
        const allWorkers = await WorkerAPI.getAllWorkers();
        console.log(`Found ${allWorkers.length} workers in API response`);
        
        // Log all workers for debugging
        allWorkers.forEach(w => {
          console.log(`Worker: ${w.fullName} (ID: ${w.id}, Status: ${w.status})`);
        });
        
        const foundWorker = allWorkers.find(w => w.id === workerId);
        
        if (foundWorker) {
          console.log(`Found worker matching ID ${workerId}: ${foundWorker.fullName}`);
          setWorker(foundWorker);
          // Initialize editable data
          setEditableData({
            phone: foundWorker.phone || '',
            email: foundWorker.email || '',
            address: foundWorker.address || '',
            service: foundWorker.serviceType || 'Cleaning',
            availability: foundWorker.availability || '',
            status: foundWorker.status || 'Pending',
            religion: foundWorker.religion || 'Hindu'
          });
        } else {
          console.log(`No worker found with exact ID match: ${workerId}`);
          
          // Try to find by partial ID (for backward compatibility)
          const partialMatch = allWorkers.find(w => 
            w.id.includes(workerId) || 
            workerId.includes(w.id) || 
            (workerId.includes(w.phone?.replace(/[^0-9]/g, '') || ''))
          );
          
          if (partialMatch) {
            console.log(`Found partial match: ${partialMatch.fullName} (ID: ${partialMatch.id})`);
            setWorker(partialMatch);
            setEditableData({
              phone: partialMatch.phone || '',
              email: partialMatch.email || '',
              address: partialMatch.address || '',
              service: partialMatch.serviceType || 'Cleaning',
              availability: partialMatch.availability || '',
              status: partialMatch.status || 'Pending',
              religion: partialMatch.religion || 'Hindu'
            });
          } else {
          // First fallback: try to get worker from Supabase
          try {
            const workerApplications = await getWorkerApplications();
            const workerApp = workerApplications.find(w => w.id === workerId);
            
            if (workerApp) {
              const mappedWorker = mapWorkerApplicationToWorker(workerApp);
              setWorker(mappedWorker as Worker);
              // Initialize editable data
              setEditableData({
                phone: mappedWorker.phone || '',
                email: mappedWorker.email || '',
                address: mappedWorker.address || '',
                service: mappedWorker.serviceType || 'Cleaning',
                availability: mappedWorker.availability || '',
                status: mappedWorker.status || 'Pending',
                religion: mappedWorker.religion || 'Hindu'
              });
            } else {
              // Second fallback: mock database
              const mockWorker = WorkerService.getById(workerId);
              if (mockWorker) {
                setWorker(mockWorker);
                setEditableData({
                  phone: mockWorker.phone || '',
                  email: mockWorker.email || '',
                  address: mockWorker.address || '',
                  service: mockWorker.serviceType || 'Cleaning',
                  availability: mockWorker.availability || '',
                  status: mockWorker.status || 'Pending',
                  religion: mockWorker.religion || 'Hindu'
                });
              }
            }
          } catch (supabaseError) {
            console.error("Error loading worker data from Supabase:", supabaseError);
            // Fallback to mock database
            const mockWorker = WorkerService.getById(workerId);
            setWorker(mockWorker);
          }
        }
      } catch (error) {
        console.error("Error loading worker data from API:", error);
        // Try Supabase as fallback
        try {
          const workerApplications = await getWorkerApplications();
          const workerApp = workerApplications.find(w => w.id === workerId);
          
          if (workerApp) {
            const mappedWorker = mapWorkerApplicationToWorker(workerApp);
            setWorker(mappedWorker as Worker);
          } else {
            // Fallback to mock database
            const mockWorker = WorkerService.getById(workerId);
            setWorker(mockWorker);
          }
        } catch (supabaseError) {
          console.error("Error loading worker data from Supabase:", supabaseError);
          // Fallback to mock database
          const mockWorker = WorkerService.getById(workerId);
          setWorker(mockWorker);
        }
      } finally {
        setIsLoading(false);
      }
    };
    
    loadWorkerData();
  }, [workerId, open]);

  const handleUpdateWorkerProfile = async (fieldsToUpdate: Partial<typeof editableData>) => {
    if (!worker) return;

    setIsUpdating(true);
    try {
      console.log(`Updating worker profile for ID: ${worker.id}`, fieldsToUpdate);
      
      // Check if we're changing status (this is a critical operation)
      if (fieldsToUpdate.status) {
        console.log(`Status change detected: ${worker.status} → ${fieldsToUpdate.status}`);
        
        // Ensure all required fields are included with status changes
        const statusUpdateData = {
          ...fieldsToUpdate,
          religion: fieldsToUpdate.religion || worker.religion || 'Hindu',
          phone: fieldsToUpdate.phone || worker.phone || '',
          email: fieldsToUpdate.email || worker.email || '',
          address: fieldsToUpdate.address || worker.address || '',
          service: fieldsToUpdate.service || worker.serviceType,
          availability: fieldsToUpdate.availability || worker.availability || 'Full-Time'
        };
        
        // First try to specifically update status using the dedicated method
        try {
          const success = await WorkerAPI.updateWorkerStatus(
            worker.id, 
            fieldsToUpdate.status, 
            statusUpdateData.religion
          );
          
          if (success) {
            console.log(`Status updated successfully to: ${fieldsToUpdate.status}`);
          } else {
            throw new Error("Status update returned false");
          }
        } catch (statusError) {
          console.error("Error with dedicated status update method, trying full profile update:", statusError);
          
          // Fall back to full profile update
          const success = await WorkerAPI.updateWorkerProfile(worker.id, statusUpdateData, worker);
          
          if (!success) {
            throw new Error("Failed to update worker profile via API");
          }
        }
      } else {
        // Normal profile update (not changing status)
        const success = await WorkerAPI.updateWorkerProfile(worker.id, fieldsToUpdate, worker);
        
        if (!success) {
          throw new Error("Failed to update worker profile via API");
        }
      }
      
      // Refresh worker data to ensure we have the latest from the server
      try {
        // Try to get updated worker from API
        const allWorkers = await WorkerAPI.getAllWorkers();
        const refreshedWorker = allWorkers.find(w => w.id === worker.id);
        
        if (refreshedWorker) {
          console.log("Successfully fetched updated worker data from API");
          // Use the fresh data from server
          setWorker(refreshedWorker);
          
          // Also update local mockDB
          WorkerService.update(worker.id, refreshedWorker);
          
          // Return early since we've updated the worker already
          return;
        }
      } catch (refreshError) {
        console.warn("Could not refresh worker data from API:", refreshError);
      }
      
      // Fallback: Update local state with what we know
      const updatedWorker = {
        ...worker,
        phone: fieldsToUpdate.phone || worker.phone,
        email: fieldsToUpdate.email || worker.email,
        address: fieldsToUpdate.address || worker.address,
        serviceType: (fieldsToUpdate.service || worker.serviceType) as ServiceType,
        availability: fieldsToUpdate.availability || worker.availability,
        status: (fieldsToUpdate.status || worker.status) as WorkerStatus,
        religion: fieldsToUpdate.religion || worker.religion
      };
      
      // Update mock database for compatibility
      WorkerService.update(worker.id, updatedWorker);
      
      setWorker(updatedWorker);
      setEditableData({
        phone: updatedWorker.phone || '',
        email: updatedWorker.email || '',
        address: updatedWorker.address || '',
        service: updatedWorker.serviceType || 'Cleaning',
        availability: updatedWorker.availability || '',
        status: updatedWorker.status || 'Pending',
        religion: updatedWorker.religion || 'Hindu'
      });
      
      toast({
        title: "Profile Updated",
        description: "Worker profile has been updated successfully.",
      });
      
      if (onStatusChange) onStatusChange();
    } catch (error) {
      console.error("Error updating worker profile:", error);
      toast({
        title: "Error",
        description: "Failed to update worker profile",
        variant: "destructive",
      });
    } finally {
      setIsUpdating(false);
    }
  };

  const handleQuickStatusChange = async (newStatus: WorkerStatus) => {
    if (!worker) return;
    
    setIsUpdating(true);
    console.log(`Quick status change: ${worker.status} → ${newStatus}`);
    
    // Show loading toast to indicate progress
    const loadingToast = toast({
      title: "Updating Status...",
      description: `Changing worker status to ${newStatus}`,
    });
    
    try {
      // Use the specific updateWorkerStatus method for more reliable status updates
      console.log(`Using WorkerAPI.updateWorkerStatus for worker ID: ${worker.id}`);
      const success = await WorkerAPI.updateWorkerStatus(
        worker.id, 
        newStatus, 
        worker.religion || 'Hindu'
      );
      
      if (success) {
        console.log(`Worker status updated to ${newStatus} successfully`);
        toast({
          title: "Status Updated",
          description: `Worker status changed to ${newStatus}`,
          variant: "success"
        });
        
        // Update the local worker object
        const updatedWorker = {
          ...worker,
          status: newStatus
        };
        
        // Update mock database for compatibility
        WorkerService.update(worker.id, updatedWorker);
        
        // Update UI state
        setWorker(updatedWorker);
        setEditableData({
          ...editableData,
          status: newStatus
        });
        
        // Notify parent component
        if (onStatusChange) onStatusChange();
      } else {
        throw new Error("Status update returned false");
      }
    } catch (error) {
      console.error("Error updating worker status:", error);
      
      // First try to refresh the worker mapping
      try {
        console.log("Attempting to refresh worker mappings...");
        await WorkerAPI.syncWorkerMappings();
        
        // Try again with refreshed mappings
        const secondAttempt = await WorkerAPI.updateWorkerStatus(
          worker.id, 
          newStatus, 
          worker.religion || 'Hindu'
        );
        
        if (secondAttempt) {
          console.log(`Second attempt successful! Worker status updated to ${newStatus}`);
          toast({
            title: "Status Updated",
            description: `Worker status changed to ${newStatus} (after retry)`,
            variant: "success"
          });
          
          // Update the local worker
          const updatedWorker = { ...worker, status: newStatus };
          setWorker(updatedWorker);
          WorkerService.update(worker.id, updatedWorker);
          
          if (onStatusChange) onStatusChange();
          return;
        }
      } catch (retryError) {
        console.error("Retry attempt also failed:", retryError);
      }
      
      // If both attempts failed, show error
      toast({
        title: "Error",
        description: `Failed to update worker status to ${newStatus}. Please try again.`,
        variant: "destructive",
      });
    } finally {
      setIsUpdating(false);
    }
  };

  const handleSaveChanges = async () => {
    await handleUpdateWorkerProfile(editableData);
    setIsEditing(false);
  };

  const handleCancelEdit = () => {
    if (worker) {
      // Reset to original values
      setEditableData({
        phone: worker.phone || '',
        email: worker.email || '',
        address: worker.address || '',
        service: worker.serviceType || 'Cleaning',
        availability: worker.availability || '',
        status: worker.status || 'Pending',
        religion: worker.religion || 'Hindu'
      });
    }
    setIsEditing(false);
  };

  const handleVerifyWorker = async () => {
    if (!worker) return;

    setIsVerifying(true);
    try {
      // This is just a document verification action, doesn't change status
      // In a real implementation, this would make an API call to mark documents as verified
      toast({
        title: "Worker Verified",
        description: "Worker documents have been verified.",
      });
      if (onStatusChange) onStatusChange();
    } catch (error) {
      console.error("Error verifying worker:", error);
      toast({
        title: "Error",
        description: "Failed to verify worker documents",
        variant: "destructive",
      });
    } finally {
      setIsVerifying(false);
    }
  };

  const handleDeleteWorker = async () => {
    if (!worker) return;

    setIsDeleting(true);
    try {
      // First try to delete via the new API
      try {
        const success = await WorkerAPI.deleteWorker(worker.id);
        if (!success) {
          throw new Error("Failed to delete worker via API");
        }
      } catch (apiError) {
        console.error("Error deleting worker via API, trying fallback:", apiError);
        // Try to delete from Supabase as fallback
        const success = await deleteWorkerApplication(worker.id);
        
        if (!success) {
          throw new Error("Failed to delete worker via Supabase");
        }
      }
      
      // Also delete from mock database for compatibility
      WorkerService.delete(worker.id);
      
      toast({
        title: "Worker Deleted",
        description: "Worker has been deleted successfully.",
        variant: "destructive",
      });
      
      onClose();
      if (onStatusChange) onStatusChange();
    } catch (error) {
      console.error("Error deleting worker:", error);
      toast({
        title: "Error",
        description: "Failed to delete worker",
        variant: "destructive",
      });
    } finally {
      setIsDeleting(false);
    }
  };

  // Safe helper to get initials from a name
  const getInitials = (name: string | undefined): string => {
    if (!name) return "?";
    return name
      .split(" ")
      .map(n => n[0] || "")
      .join("")
      .toUpperCase();
  };

  if (!open) {
    return null;
  }

  return (
    <Dialog open={open} onOpenChange={() => onClose()}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold">Worker Profile</DialogTitle>
        </DialogHeader>
        
        {isLoading ? (
          <div className="flex justify-center items-center h-48">
            <p className="text-gray-500">Loading worker data...</p>
          </div>
        ) : !worker ? (
          <div className="flex justify-center items-center h-48">
            <p className="text-gray-500">Worker not found</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Left column - Basic info and Edit Controls */}
            <div className="flex flex-col items-center text-center space-y-4 p-4 border rounded-lg">
              <div className="h-24 w-24 rounded-full overflow-hidden bg-yellow-100 flex items-center justify-center text-yellow-800 text-2xl font-bold">
                {worker.photoUrl ? (
                  <img 
                    src={worker.photoUrl} 
                    alt={worker.fullName} 
                    className="w-full h-full object-cover" 
                  />
                ) : (
                  getInitials(worker.fullName)
                )}
              </div>
              <h2 className="text-xl font-bold">{worker.fullName}</h2>
              <p className="text-sm text-gray-500">{worker.status === "Active" ? "Active Worker" : worker.status}</p>
              <Badge 
                variant="outline"
                className={`${worker.status === "Active" 
                  ? "bg-green-100 text-green-800" 
                  : worker.status === "Pending" 
                    ? "bg-yellow-100 text-yellow-800"
                    : worker.status === "Rejected"
                      ? "bg-red-100 text-red-800"
                      : "bg-gray-100 text-gray-800"}`}
              >
                {worker.status}
              </Badge>
              
              {!isEditing ? (
                <Button 
                  onClick={() => setIsEditing(true)} 
                  className="w-full bg-yellow-500 hover:bg-yellow-600 text-black"
                  variant="outline"
                >
                  <Edit size={16} className="mr-2" />
                  Edit Profile
                </Button>
              ) : (
                <div className="w-full space-y-2">
                  <LoadingButton 
                    onClick={handleSaveChanges}
                    className="w-full bg-green-500 hover:bg-green-600 text-white"
                    isLoading={isUpdating}
                  >
                    <Save size={16} className="mr-2" />
                    Save Changes
                  </LoadingButton>
                  <Button 
                    onClick={handleCancelEdit}
                    className="w-full bg-gray-500 hover:bg-gray-600 text-white"
                    variant="outline"
                  >
                    <X size={16} className="mr-2" />
                    Cancel
                  </Button>
                </div>
              )}
              
              <div className="border rounded-lg p-4 space-y-3 w-full">
                <div className="flex justify-between items-center">
                  <h3 className="font-medium">Quick Status Change</h3>
                  {isUpdating && (
                    <div className="animate-spin h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full"></div>
                  )}
                </div>
                <Select
                  value={worker.status}
                  onValueChange={(value) => handleQuickStatusChange(value as WorkerStatus)}
                  disabled={isUpdating || isEditing}
                >
                  <SelectTrigger className={`w-full ${isUpdating ? 'bg-gray-100' : ''}`}>
                    <SelectValue placeholder="Select Status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Active">
                      <div className="flex items-center">
                        <span className="w-2 h-2 mr-2 rounded-full bg-green-500"></span>
                        Active
                      </div>
                    </SelectItem>
                    <SelectItem value="Inactive">
                      <div className="flex items-center">
                        <span className="w-2 h-2 mr-2 rounded-full bg-gray-500"></span>
                        Inactive
                      </div>
                    </SelectItem>
                    <SelectItem value="Pending">
                      <div className="flex items-center">
                        <span className="w-2 h-2 mr-2 rounded-full bg-yellow-500"></span>
                        Pending
                      </div>
                    </SelectItem>
                    <SelectItem value="Rejected">
                      <div className="flex items-center">
                        <span className="w-2 h-2 mr-2 rounded-full bg-red-500"></span>
                        Rejected
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <LoadingButton 
                onClick={handleVerifyWorker}
                className="w-full bg-blue-50 text-blue-600 border border-blue-200 hover:bg-blue-100 hover:text-blue-700"  
                variant="outline"
                isLoading={isVerifying}
              >
                <Check size={16} className="mr-2" />
                Verify Worker
              </LoadingButton>
              
              <LoadingButton 
                onClick={handleDeleteWorker}
                className="w-full bg-red-50 text-red-600 border border-red-200 hover:bg-red-100 hover:text-red-700"
                variant="outline"
                isLoading={isDeleting}
              >
                <Trash size={16} className="mr-2" />
                Delete Profile
              </LoadingButton>
            </div>
            
            {/* Middle column - Contact & Experience (Editable) */}
            <div className="space-y-6">
              <div className="border rounded-lg p-4 space-y-4">
                <h3 className="font-medium text-lg">Contact Information</h3>
                
                <div className="space-y-4">
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-600 mt-1">📱</span>
                    <div className="flex-1">
                      <Label className="text-sm text-gray-500">Phone Number</Label>
                      {isEditing ? (
                        <Input
                          value={editableData.phone}
                          onChange={(e) => setEditableData({...editableData, phone: e.target.value})}
                          placeholder="Enter phone number"
                          className="mt-1"
                        />
                      ) : (
                        <p className="mt-1">{worker.phone || "N/A"}</p>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-600 mt-1">✉️</span>
                    <div className="flex-1">
                      <Label className="text-sm text-gray-500">Email Address</Label>
                      {isEditing ? (
                        <Input
                          value={editableData.email}
                          onChange={(e) => setEditableData({...editableData, email: e.target.value})}
                          placeholder="Enter email address"
                          type="email"
                          className="mt-1"
                        />
                      ) : (
                        <p className="mt-1">{worker.email || "N/A"}</p>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-600 mt-1">📍</span>
                    <div className="flex-1">
                      <Label className="text-sm text-gray-500">Address</Label>
                      {isEditing ? (
                        <Input
                          value={editableData.address}
                          onChange={(e) => setEditableData({...editableData, address: e.target.value})}
                          placeholder="Enter address"
                          className="mt-1"
                        />
                      ) : (
                        <div className="mt-1">
                          <p>{worker.address || "N/A"}</p>
                          <p>{worker.city || "N/A"}</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="border rounded-lg p-4 space-y-4">
                <h3 className="font-medium text-lg">Professional Details</h3>
                
                <div className="space-y-4">
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-600 mt-1">👷</span>
                    <div className="flex-1">
                      <Label className="text-sm text-gray-500">Service Type</Label>
                      {isEditing ? (
                        <Select
                          value={editableData.service}
                          onValueChange={(value) => setEditableData({...editableData, service: value as ServiceType})}
                        >
                          <SelectTrigger className="mt-1">
                            <SelectValue placeholder="Select Service" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Cleaning">Cleaning</SelectItem>
                            <SelectItem value="Cooking">Cooking</SelectItem>
                            <SelectItem value="Driving">Driving</SelectItem>
                            <SelectItem value="Sweeping">Sweeping</SelectItem>
                            <SelectItem value="Landscaping">Landscaping</SelectItem>
                          </SelectContent>
                        </Select>
                      ) : (
                        <Badge variant="outline" className="bg-yellow-50 text-yellow-800 border-yellow-200 mt-1">
                          {worker.serviceType || "N/A"}
                        </Badge>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-600 mt-1">🕒</span>
                    <div className="flex-1">
                      <Label className="text-sm text-gray-500">Availability</Label>
                      {isEditing ? (
                        <Select
                          value={editableData.availability}
                          onValueChange={(value) => setEditableData({...editableData, availability: value})}
                        >
                          <SelectTrigger className="mt-1">
                            <SelectValue placeholder="Select Availability" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Full-Time">Full-Time</SelectItem>
                            <SelectItem value="Part-Time">Part-Time</SelectItem>
                            <SelectItem value="Weekends Only">Weekends Only</SelectItem>
                            <SelectItem value="On-Call">On-Call</SelectItem>
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="mt-1">{worker.availability || "N/A"}</p>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-600 mt-1">🙏</span>
                    <div className="flex-1">
                      <Label className="text-sm text-gray-500">Religion</Label>
                      {isEditing ? (
                        <Select
                          value={editableData.religion}
                          onValueChange={(value) => setEditableData({...editableData, religion: value})}
                        >
                          <SelectTrigger className="mt-1">
                            <SelectValue placeholder="Select Religion" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Hindu">Hindu</SelectItem>
                            <SelectItem value="Muslim">Muslim</SelectItem>
                            <SelectItem value="Christian">Christian</SelectItem>
                            <SelectItem value="Sikh">Sikh</SelectItem>
                            <SelectItem value="Buddhist">Buddhist</SelectItem>
                            <SelectItem value="Other">Other</SelectItem>
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="mt-1">{worker.religion || "Hindu"}</p>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-600">⏱️</span>
                    <div>
                      <p className="text-sm text-gray-500">Experience</p>
                      <p>{worker.experience ? `${worker.experience} years` : "N/A"}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-600">📅</span>
                    <div>
                      <p className="text-sm text-gray-500">Joining Date</p>
                      <p>{worker.joiningDate || worker.createdAt ? new Date(worker.joiningDate || worker.createdAt).toLocaleDateString() : "N/A"}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-2">
                    <span className="text-yellow-600">🆔</span>
                    <div>
                      <p className="text-sm text-gray-500">ID Information</p>
                      <p>{worker.idType || "N/A"}: {worker.idNumber || "N/A"}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Right column - Skills, Stats & About */}
            <div className="space-y-6">
              <div className="border rounded-lg p-4">
                <h3 className="font-medium text-lg mb-3">Skills</h3>
                <div className="flex flex-wrap gap-2">
                  {worker.skills && worker.skills.length > 0 ? worker.skills.map((skill, index) => (
                    <Badge key={index} variant="outline" className="bg-yellow-50 text-yellow-800 border-yellow-200">
                      {skill}
                    </Badge>
                  )) : (
                    <p className="text-sm text-gray-500">No skills listed</p>
                  )}
                </div>
              </div>
              
              <div className="border rounded-lg p-4">
                <h3 className="font-medium text-lg mb-3">Booking Stats</h3>
                <div className="grid grid-cols-3 gap-4 text-center">
                  <div className="bg-yellow-50 p-3 rounded-lg">
                    <p className="text-2xl font-bold">{worker.totalBookings || 0}</p>
                    <p className="text-xs text-gray-600">Total Bookings</p>
                  </div>
                  <div className="bg-yellow-50 p-3 rounded-lg">
                    <p className="text-2xl font-bold">{worker.rating ? worker.rating.toFixed(1) : 'N/A'}</p>
                    <p className="text-xs text-gray-600">Rating</p>
                  </div>
                  <div className="bg-yellow-50 p-3 rounded-lg">
                    <p className="text-2xl font-bold">{worker.completionRate ? worker.completionRate + '%' : '0%'}</p>
                    <p className="text-xs text-gray-600">Completion</p>
                  </div>
                </div>
              </div>
              
              <div className="border rounded-lg p-4">
                <h3 className="font-medium text-lg mb-2">About</h3>
                <p className="text-sm text-gray-700">{worker.about || "No information provided."}</p>
              </div>
              
              {worker.idProofUrl && (
                <div className="border rounded-lg p-4">
                  <h3 className="font-medium text-lg mb-3">ID Proof Document</h3>
                  <a 
                    href={worker.idProofUrl} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="flex items-center justify-center p-2 bg-blue-50 text-blue-600 rounded hover:bg-blue-100 transition-colors"
                  >
                    View ID Document
                  </a>
                </div>
              )}
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
