MERI DIDI CONTROL CENTER
TECHNICAL DOCUMENTATION


1. PROJECT OVERVIEW

The Meri Didi Control Center is an admin dashboard application designed to manage services, workers, bookings, and customers for what appears to be a service-based business. The application follows modern web development practices with a focus on aesthetics and usability, using a yellow/white color scheme with red accents.

2. TECHNOLOGY STACK

2.1 Frontend Framework
• React: Built using React with TypeScript for type safety
• Vite: Used as the build tool and development server
• Bun: Package manager (as evidenced by bun.lockb file)

2.2 UI Libraries & Components
• TailwindCSS: For utility-first styling
• Shadcn/UI: Component library (evident from the components folder structure)
• Lucide React: For icons

2.3 State Management
• React's Context API: Used for local state management
• No global state library: No evidence of Redux, Zustand, or other global state libraries
• Local component state: Using React's useState hook for component-level state

2.4 Routing
• React Router: Used for navigation (evident from useLocation and Link imports)

2.5 Development Approach
• Coded from scratch: This is a custom-built application, not created with FlutterFlow or similar no-code tools
• Component-based architecture: Follows React's component-based design patterns
• TypeScript: Used throughout for type safety and better developer experience

3. ARCHITECTURE

3.1 Folder Structure
The project follows a feature-based organization with some aspects of domain-driven design:
	
	

























	Root directory - 
























/src/components/: UI components organized by feature
    - /bookings/: Booking-related components
    - /dashboard/: Dashboard-specific components
    - /layout/: Layout components (Sidebar, Header, etc.)
    - /notifications/: Notification components
    - /ui/: Generic UI components (likely from shadcn/ui)
    - /worker/: Worker management components

/src/pages/: Page components that combine smaller components
    - Each file represents a distinct page in the application

/src/hooks/: Custom React hooks
    - use-mobile.tsx: For responsive design detection
    - use-toast.ts: For toast notifications

/src/services/: Service layer for data handling
    - mockDatabase.ts: Mock data service (likely for development)
    - booking-service.ts: Service for booking-related operations

/src/lib/: Utility functions and services
    - utils.ts: General utility functions
    - supabase.ts: Supabase client configuration

/src/types/: TypeScript type definitions

3.2 Data Flow Architecture
The application follows a typical React data flow:
1. Data is fetched from services (potentially Supabase)
2. Passed down through components via props
3. Local state is managed with useState
4. Component-specific logic is abstracted into custom hooks

3.3 Backend Integration
• Supabase: Evidence of Supabase integration for backend services (from folder structure)
    - /supabase/: Contains configuration
    - /src/integrations/supabase/: Integration code
    - /src/lib/supabase.ts: Client configuration

4. RESPONSIVE DESIGN

• Fully responsive: The application is designed to work on various screen sizes
• Mobile detection: Custom hook useIsMobile() to detect mobile devices
• Adaptive layout: Sidebar collapses on smaller screens
• Conditional rendering: Different UI elements for mobile and desktop views

5. UI/UX DESIGN

• Color scheme: Yellow/white as primary colors with red accents
• Modern UI components: Cards, tables, charts, and notifications
• Micro-animations: Hover effects, transitions, and subtle animations
• Interactive elements: Collapsible sidebar, tooltips, and responsive tables

6. KEY FEATURES

6.1 Dashboard
Overview with charts, statistics, and recent bookings

6.2 Worker Management
Interface for managing service providers and their profiles

6.3 Bookings
System for handling customer service bookings and appointments

6.4 Customer Management
Tools for managing customer data and interactions

6.5 Service Pricing
Module for setting and managing service prices

6.6 Notifications
System for alerts and communications

6.7 Settings
Application configuration and preferences

7. DEVELOPMENT PRACTICES

7.1 Code Organization
• Component reusability: Shared components for common UI elements
• TypeScript interfaces: Type definitions for props and data structures
• Conditional rendering: Based on state and device type

7.2 Styling Approach
• CSS utilities: Using Tailwind classes with custom extensions
• Custom hooks: For shared logic across components

8. PERFORMANCE CONSIDERATIONS

• Code splitting: Likely implemented by the React Router setup
• Lazy loading: Components loaded as needed
• Optimized rendering: Using React's best practices

9. CONCLUSION

The Meri Didi Control Center is a modern, custom-built React application with TypeScript that follows current best practices in web development. It's designed to be responsive, maintainable, and scalable with a clean architecture that separates concerns between UI components, services, and utilities.

The application appears to be in active development with recent UI enhancements focusing on aesthetics and usability, particularly around the sidebar, dashboard charts, and management pages.
